// Generated by Apple Swift version 4.1 (swiftlang-902.0.48 clang-902.0.37.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import UIKit;
@import CoreGraphics;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="EarTraining",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class UIWindow;
@class UIApplication;

SWIFT_CLASS("_TtC11EarTraining11AppDelegate")
@interface AppDelegate : UIResponder <UIApplicationDelegate>
@property (nonatomic, strong) UIWindow * _Nullable window;
- (BOOL)application:(UIApplication * _Nonnull)application didFinishLaunchingWithOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions SWIFT_WARN_UNUSED_RESULT;
- (void)applicationWillResignActive:(UIApplication * _Nonnull)application;
- (void)applicationDidEnterBackground:(UIApplication * _Nonnull)application;
- (void)applicationWillEnterForeground:(UIApplication * _Nonnull)application;
- (void)applicationDidBecomeActive:(UIApplication * _Nonnull)application;
- (void)applicationWillTerminate:(UIApplication * _Nonnull)application;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UILabel;
@class UIButton;
@class UISlider;
@class UILongPressGestureRecognizer;
@class UIStoryboardSegue;
@class NSBundle;
@class NSCoder;

/// View controller for the Ascending Chromatic Sing interval exercises.
/// A random ascending chromatic interval will be displayed for the user to sing above a given pitch. The user can change the octave using the slider, and the user can change the instrument that is used to play the pitches. The background showing the sung note turns red if it is incorrect, orange if it is correct but out of tune by 10 cents, and green if correct and in tune.
SWIFT_CLASS("_TtC11EarTraining28AscendingCSingViewController")
@interface AscendingCSingViewController : UIViewController
/// Label that displays the given bottom note.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified givenNote;
/// Label that displays the sung top note.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified sungNote;
/// Label that displays the chromatic interval to be sung.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified intervalLabel;
/// Button the user holds down to record.
@property (nonatomic, strong) IBOutlet UIButton * _Null_unspecified recordButton;
/// Collection of the instrument buttons.
@property (nonatomic, copy) IBOutletCollection(UIButton) NSArray<UIButton *> * _Null_unspecified instrumentButtons;
/// Label that displays the number of the exercise.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified exerciseNumLabel;
/// Open the mic and call <code>setInterval()</code>.
- (void)viewDidLoad;
/// Displays and hides the instrument button list
/// \param sender The UIButton to show/hide the list of instruments
///
- (IBAction)instrumentsWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a piano.
/// \param sender The UIButton labeled Piano
///
- (IBAction)pianoWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a clarinet.
/// \param sender The UIButton labeled Clarinet
///
- (IBAction)clarinetWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a french horn.
/// \param sender The UIButton labeled French Horn.
///
- (IBAction)frenchHornWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to pizzicato strings.
/// \param sender The UIButton labeled Pizz Strings.
///
- (IBAction)stringWithSender:(UIButton * _Nonnull)sender;
/// Changes the octave of the given note and answer.
/// \param sender The UISlider.
///
- (IBAction)changeOctaveWithSender:(UISlider * _Nonnull)sender;
/// Plays the bottom note again.
/// \param sender The UIButton to replay the given bottom note.
///
- (IBAction)replayWithSender:(UIButton * _Nonnull)sender;
/// Plays the answer (top note).
/// \param sender The UIButton to play the answer.
///
- (IBAction)playAnswerWithSender:(UIButton * _Nonnull)sender;
/// Moves on to the next exercise by resetting the buttons, calls <code>setInterval()</code>, and plays the new bottom note.
/// \param sender The UIButton labeled start.
///
- (IBAction)startWithSender:(UIButton * _Nonnull)sender;
/// Sets the sung note label to what is being sung into the microphone.
- (void)updateUI;
/// Changes the text on the button used to hold down to record when pressed, and calls <code>updateUI()</code> using the timer.
- (IBAction)handleGesture:(UILongPressGestureRecognizer * _Nonnull)sender;
/// Unwind segue when in the instruction page.
- (IBAction)unwindSegueSingingWithSegue:(UIStoryboardSegue * _Nonnull)segue;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// View controller for the Ascending Chromatic exercises.
/// Random ascending chromatic intervals will be played, and the user guesses the interval by pressing on the corresponding buttons. The user has the option to change the instrument that is used to play the intervals.
SWIFT_CLASS("_TtC11EarTraining32AscendingChromaticViewController")
@interface AscendingChromaticViewController : UIViewController
/// Collection of the interval buttons.
@property (nonatomic, copy) IBOutletCollection(UIButton) NSArray<UIButton *> * _Null_unspecified intervalButtons;
/// Collection of the instrument buttons.
@property (nonatomic, copy) IBOutletCollection(UIButton) NSArray<UIButton *> * _Null_unspecified instrumentButtons;
/// Label that displays the number of the exercise.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified exerciseNumLabel;
/// Close the mic and call <code>setInterval()</code>.
- (void)viewDidLoad;
/// Displays and hides the instrument button list
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     sender: The UIButton to show/hide the list of instruments
///   </li>
/// </ul>
- (IBAction)instrumentsWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a piano.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     sender: The UIButton labeled Piano
///   </li>
/// </ul>
- (IBAction)pianoWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a clarinet.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     sender: The UIButton labeled Clarinet
///   </li>
/// </ul>
- (IBAction)clarinetWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a french horn.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     sender: The UIButton labeled French Horn.
///   </li>
/// </ul>
- (IBAction)frenchHornWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to pizzicato strings.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     sender: The UIButton labeled Pizz Strings.
///   </li>
/// </ul>
- (IBAction)stringWithSender:(UIButton * _Nonnull)sender;
/// Plays the current interval again. Calls <code>playInterval()</code>.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     sender: The UIButton to replay the interval.
///   </li>
/// </ul>
- (IBAction)playAgainWithSender:(UIButton * _Nonnull)sender;
/// Moves on to the next exercise by resetting the buttons and calls <code>setInterval()</code>.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     sender: The UIButton labeled next.
///   </li>
/// </ul>
- (IBAction)nextWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the interval played is a minor second, turns red if not.
- (IBAction)minorSecondWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the interval played is a major second, turns red if not.
- (IBAction)majorSecondWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the interval played is a minor third, turns red if not.
- (IBAction)minorThirdWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the interval played is a major third, turns red if not.
- (IBAction)majorThirdWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the interval played is a perfect fourth, turns red if not.
- (IBAction)perfectFourthWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the interval played is a tritone, turns red if not.
- (IBAction)tritoneWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the interval played is a perfect fifth, turns red if not.
- (IBAction)perfectFifthWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the interval played is a minor sixth, turns red if not.
- (IBAction)minorSixthWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the interval played is a major sixth, turns red if not.
- (IBAction)majorSixthWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the interval played is a minor seventh, turns red if not.
- (IBAction)minorSeventhWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the interval played is a major seventh, turns red if not.
- (IBAction)majorSeventhWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the interval played is an octave, turns red if not.
- (IBAction)octaveWithSender:(UIButton * _Nonnull)sender;
/// Unwind segue when in the instruction page.
- (IBAction)unwindSegueIDWithSegue:(UIStoryboardSegue * _Nonnull)segue;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// View controller for the Ascending Diatonic Sing interval exercises.
/// A random ascending diatonic interval will be displayed for the user to sing above a given pitch. The user can change the octave using the slider, and the user can change the instrument that is used to play the pitches. The background showing the sung note turns red if it is incorrect, orange if it is correct but out of tune by 10 cents, and green if correct and in tune.
SWIFT_CLASS("_TtC11EarTraining36AscendingDSingIntervalViewController")
@interface AscendingDSingIntervalViewController : UIViewController
/// Label that displays the given bottom note.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified givenNote;
/// Label that displays the sung top note.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified sungNote;
/// Label that displays the diatonic interval to be sung.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified intervalLabel;
/// Button the user holds down to record.
@property (nonatomic, strong) IBOutlet UIButton * _Null_unspecified recordButton;
/// Collection of the instrument buttons.
@property (nonatomic, copy) IBOutletCollection(UIButton) NSArray<UIButton *> * _Null_unspecified instrumentButtons;
/// Label that displays the number of the exercise.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified exerciseNumLabel;
/// Open the mic and call <code>setInterval()</code>.
- (void)viewDidLoad;
/// Displays and hides the instrument button list
/// \param sender The UIButton to show/hide the list of instruments
///
- (IBAction)instrumentsWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a piano.
/// \param sender The UIButton labeled Piano
///
- (IBAction)pianoWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a clarinet.
/// \param sender The UIButton labeled Clarinet
///
- (IBAction)clarinetWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a french horn.
/// \param sender The UIButton labeled French Horn.
///
- (IBAction)frenchHornWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to pizzicato strings.
/// \param sender The UIButton labeled Pizz Strings.
///
- (IBAction)stringWithSender:(UIButton * _Nonnull)sender;
/// Changes the octave of the given note and answer.
/// \param sender The UISlider.
///
- (IBAction)changeOctaveWithSender:(UISlider * _Nonnull)sender;
/// Plays the bottom note again.
/// \param sender The UIButton to replay the given bottom note.
///
- (IBAction)replayWithSender:(UIButton * _Nonnull)sender;
/// Plays the answer (top note).
/// \param sender The UIButton to play the answer.
///
- (IBAction)playAnswerWithSender:(UIButton * _Nonnull)sender;
/// Moves on to the next exercise by resetting the buttons, calls <code>setInterval()</code>, and plays the new bottom note.
/// \param sender The UIButton labeled start.
///
- (IBAction)startWithSender:(UIButton * _Nonnull)sender;
/// Sets the sung note label to what is being sung into the microphone.
- (void)updateUI;
/// Changes the text on the button used to hold down to record when pressed, and calls <code>updateUI()</code> using the timer.
- (IBAction)handleGesture:(UILongPressGestureRecognizer * _Nonnull)sender;
/// Unwind segue when in the instruction page.
- (IBAction)unwindSegueSingingWithSegue:(UIStoryboardSegue * _Nonnull)segue;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// View controller for the Ascending Diatonic interval exercises.
/// Random ascending diatonic intervals will be played, and the user guesses the interval by pressing on the corresponding buttons. The user has the option to change the instrument that is used to play the intervals.
SWIFT_CLASS("_TtC11EarTraining31AscendingDiatonicViewController")
@interface AscendingDiatonicViewController : UIViewController
/// Collection of the interval buttons.
@property (nonatomic, copy) IBOutletCollection(UIButton) NSArray<UIButton *> * _Null_unspecified intervalButtons;
/// Collection of the instrument buttons.
@property (nonatomic, copy) IBOutletCollection(UIButton) NSArray<UIButton *> * _Null_unspecified instrumentButtons;
/// Label that displays the number of the exercise.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified exerciseNumLabel;
/// Close the mic and call <code>setInterval()</code>.
- (void)viewDidLoad;
/// Displays and hides the instrument button list
/// \param sender The UIButton to show/hide the list of instruments
///
- (IBAction)instrumentsWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a piano.
/// \param sender The UIButton labeled Piano
///
- (IBAction)pianoWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a clarinet.
/// \param sender The UIButton labeled Clarinet
///
- (IBAction)clarinetWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a french horn.
/// \param sender The UIButton labeled French Horn.
///
- (IBAction)frenchHornWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to pizzicato strings.
/// \param sender The UIButton labeled Pizz Strings.
///
- (IBAction)stringWithSender:(UIButton * _Nonnull)sender;
/// Plays the current interval again. Calls <code>playInterval()</code>.
/// \param sender The UIButton to replay the interval.
///
- (IBAction)playAgainWithSender:(UIButton * _Nonnull)sender;
/// Moves on to the next exercise by resetting the buttons and calls <code>setInterval()</code>.
/// \param sender The UIButton labeled next.
///
- (IBAction)nextWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the interval played is a major second, turns red if not.
- (IBAction)majorSecondWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the interval played is a major third, turns red if not.
- (IBAction)majorThirdWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the interval played is a perfect fourth, turns red if not.
- (IBAction)perfectFourthWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the interval played is a perfect fifth, turns red if not.
- (IBAction)perfectFifthWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the interval played is a major sixth, turns red if not.
- (IBAction)majorSixthWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the interval played is a major seventh, turns red if not.
- (IBAction)majorSeventhWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the interval played is an octave, turns red if not.
- (IBAction)octaveWithSender:(UIButton * _Nonnull)sender;
/// Unwind segue when in the instruction page.
- (IBAction)unwindSegueIDWithSegue:(UIStoryboardSegue * _Nonnull)segue;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UITableView;
@class UIView;
@class UITableViewCell;

/// Table view controller to display the chord exercises.
SWIFT_CLASS("_TtC11EarTraining25ChordsTableViewController")
@interface ChordsTableViewController : UITableViewController
/// Sets the large title display mode to never.
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
/// Set the headers for the chord exercises
- (UIView * _Nullable)tableView:(UITableView * _Nonnull)tableView viewForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// Set the height for the headers to 50
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// Set the number of sections to be the number of exercises
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
/// Set the number of rows in each section to be the number of exercises in each section
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// Configure the cell with the exercise name, description, and image
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// Call <code>performSegue()</code> on the exercise the user selects.
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (nonnull instancetype)initWithStyle:(UITableViewStyle)style OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// View controller for the Chromatic Scale exercises.
/// A random chromatic, whole tone, whole-half octatonic, or half-whole octatonic scale will be played, and the user guesses the type of scale by pressing on the corresponding buttons. The user has the option to change the instrument that is used to play the scales.
SWIFT_CLASS("_TtC11EarTraining29ChromaticScalesViewController")
@interface ChromaticScalesViewController : UIViewController
/// Collection of the scale buttons.
@property (nonatomic, copy) IBOutletCollection(UIButton) NSArray<UIButton *> * _Null_unspecified scaleButtons;
/// Collection of the instrument buttons.
@property (nonatomic, copy) IBOutletCollection(UIButton) NSArray<UIButton *> * _Null_unspecified instrumentButtons;
/// Label that displays the number of the exercise.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified exerciseNumLabel;
/// Close the mic, add scales to <code>scaleList</code>, and set <code>scaleType</code> and <code>firstNote</code> to random indices.
- (void)viewDidLoad;
/// Displays and hides the instrument button list
/// \param sender The UIButton to show/hide the list of instruments
///
- (IBAction)instrumentsWithSender:(UIButton * _Nonnull)sender;
/// Plays the current scale again. Calls <code>playScale()</code>.
- (IBAction)playAgainWithSender:(UIButton * _Nonnull)sender;
/// Moves on to the next exercise by resetting the buttons and randomly selecting a scale type and first note.
/// \param sender The UIButton labeled next.
///
- (IBAction)nextWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a piano.
/// \param sender The UIButton labeled Piano
///
- (IBAction)pianoWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a clarinet.
/// \param sender The UIButton labeled Clarinet
///
- (IBAction)clarinetWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a french horn.
/// \param sender The UIButton labeled French Horn.
///
- (IBAction)frenchHornWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to pizzicato strings.
/// \param sender The UIButton labeled Pizz Strings.
///
- (IBAction)stringWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the scale played is a chromatic scale, turns red if not.
- (IBAction)chromaticWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the scale played is a whole tone scale, turns red if not.
- (IBAction)wholeToneWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the scale played is a whole-half octatonic scale, turns red if not.
- (IBAction)whOctatonicWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the scale played is a half-whole octatonic scale, turns red if not.
- (IBAction)hwOctatonicWithSender:(UIButton * _Nonnull)sender;
/// Unwind segue when in the instruction page.
- (IBAction)unwindSegueIDWithSegue:(UIStoryboardSegue * _Nonnull)segue;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// View controller for the Sing Chromatic, Whole-Tone, and Octatonic Scales exercises.
/// A random chromatic, whole-tone, whole-half octatonic, or half-whole octatonic scale will be displayed along with a starting pitch. The user must hold down the record button and sing the scale from the starting pitch. The user has the option to change the instrument that is used to play the starting pitch and answer, and they can use the slider to change the octave of the scale.
SWIFT_CLASS("_TtC11EarTraining27ChromaticSingViewController")
@interface ChromaticSingViewController : UIViewController
/// Label that displays the number of the exercise.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified exerciseNumLabel;
/// Label for note 1.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified note1;
/// Label for note 2.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified note2;
/// Label for note 3.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified note3;
/// Label for note 4.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified note4;
/// Label for note 5.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified note5;
/// Label for note 6.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified note6;
/// Label for note 7.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified note7;
/// Label for note 8.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified note8;
/// Label for note 9.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified note9;
/// Label for note 10.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified note10;
/// Label for note 11.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified note11;
/// Label for note 12.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified note12;
/// Label for the scale type.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified scaleLabel;
/// The record button.
@property (nonatomic, strong) IBOutlet UIButton * _Null_unspecified recordButton;
/// Collection of the instrument buttons.
@property (nonatomic, copy) IBOutletCollection(UIButton) NSArray<UIButton *> * _Null_unspecified instrumentButtons;
/// Collection of the note labels.
@property (nonatomic, copy) IBOutletCollection(UILabel) NSArray<UILabel *> * _Null_unspecified noteLabels;
/// Set the mic, add scales to <code>scaleList</code>, and call <code>setScale()</code>.
- (void)viewDidLoad;
/// Changes the octave of the scale.
/// \param sender The UISlider.
///
- (IBAction)changeOctaveWithSender:(UISlider * _Nonnull)sender;
/// Plays the first note of the current scale.
/// \param sender The UIButton to play the first note of the scale.
///
- (IBAction)playFirstNoteWithSender:(UIButton * _Nonnull)sender;
/// Plays the current scale (the answer; the scale the user should sing).
/// \param sender The UIButton to play the answer.
///
- (IBAction)playAnswerWithSender:(UIButton * _Nonnull)sender;
/// Moves on to the next exercise by resetting the labels and calls <code>setScale()</code>.
/// \param sender The UIButton labeled next.
///
- (IBAction)nextWithSender:(UIButton * _Nonnull)sender;
/// Displays and hides the instrument button list.
/// \param sender The UIButton to show/hide the list of instruments
///
- (IBAction)instrumentsWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a piano.
/// \param sender The UIButton labeled Piano
///
- (IBAction)pianoWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a clarinet.
/// \param sender The UIButton labeled Clarinet
///
- (IBAction)clarinetWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a french horn.
/// \param sender The UIButton labeled French Horn.
///
- (IBAction)frenchHornWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to pizzicato strings.
/// \param sender The UIButton labeled Pizz Strings.
///
- (IBAction)stringWithSender:(UIButton * _Nonnull)sender;
/// Changes the text on the button used to hold down to record when pressed, and calls <code>updateUI()</code> using the timer.
- (IBAction)handleGesture:(UILongPressGestureRecognizer * _Nonnull)sender;
/// Sets the sung note label to what is being sung into the microphone.
- (void)updateUI;
/// Unwind segue when in the instruction page.
- (IBAction)unwindSegueScaleSingWithSegue:(UIStoryboardSegue * _Nonnull)segue;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// View controller for the Descending Chromatic Sing interval exercises.
/// A random descending chromatic interval will be displayed for the user to sing below a given pitch. The user can change the octave using the slider, and the user can change the instrument that is used to play the pitches. The background showing the sung note turns red if it is incorrect, orange if it is correct but out of tune by 10 cents, and green if correct and in tune.
SWIFT_CLASS("_TtC11EarTraining29DescendingCSingViewController")
@interface DescendingCSingViewController : UIViewController
/// Label that displays the given top note.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified givenNote;
/// Label that displays the sung bottom note.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified sungNote;
/// Label that displays the chromatic interval to be sung.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified intervalLabel;
/// Button the user holds down to record.
@property (nonatomic, strong) IBOutlet UIButton * _Null_unspecified recordButton;
/// Collection of the instrument buttons.
@property (nonatomic, copy) IBOutletCollection(UIButton) NSArray<UIButton *> * _Null_unspecified instrumentButtons;
/// Label that displays the number of the exercise.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified exerciseNumLabel;
- (void)viewDidLoad;
/// Displays and hides the instrument button list
/// \param sender The UIButton to show/hide the list of instruments
///
- (IBAction)instrumentsWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a piano.
/// \param sender The UIButton labeled Piano
///
- (IBAction)pianoWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a clarinet.
/// \param sender The UIButton labeled Clarinet
///
- (IBAction)clarinetWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a french horn.
/// \param sender The UIButton labeled French Horn.
///
- (IBAction)frenchHornWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to pizzicato strings.
/// \param sender The UIButton labeled Pizz Strings.
///
- (IBAction)stringWithSender:(UIButton * _Nonnull)sender;
/// Changes the octave of the given note and answer.
/// \param sender The UISlider.
///
- (IBAction)changeOctaveWithSender:(UISlider * _Nonnull)sender;
/// Plays the top note again.
/// \param sender The UIButton to replay the given top note.
///
- (IBAction)replayWithSender:(UIButton * _Nonnull)sender;
/// Plays the answer (bottom note).
/// \param sender The UIButton to play the answer.
///
- (IBAction)playAnswerWithSender:(UIButton * _Nonnull)sender;
/// Moves on to the next exercise by resetting the buttons, calls <code>setInterval()</code>, and plays the new top note.
/// \param sender The UIButton labeled start.
///
- (IBAction)startWithSender:(UIButton * _Nonnull)sender;
/// Sets the sung note label to what is being sung into the microphone.
- (void)updateUI;
/// Changes the text on the button used to hold down to record when pressed, and calls <code>updateUI()</code> using the timer.
- (IBAction)handleGesture:(UILongPressGestureRecognizer * _Nonnull)sender;
/// Unwind segue when in the instruction page.
- (IBAction)unwindSegueSingingWithSegue:(UIStoryboardSegue * _Nonnull)segue;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// View controller for the Descending Chromatic interval exercises.
/// Random descending chromatic intervals will be played, and the user guesses the interval by pressing on the corresponding buttons. The user has the option to change the instrument that is used to play the intervals.
SWIFT_CLASS("_TtC11EarTraining33DescendingChromaticViewController")
@interface DescendingChromaticViewController : UIViewController
/// Collection of the interval buttons.
@property (nonatomic, copy) IBOutletCollection(UIButton) NSArray<UIButton *> * _Null_unspecified intervalButtons;
/// Collection of the instrument buttons.
@property (nonatomic, copy) IBOutletCollection(UIButton) NSArray<UIButton *> * _Null_unspecified instrumentButtons;
/// Label that displays the number of the exercise.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified exerciseNumLabel;
/// Close the mic and call <code>setInterval()</code>.
- (void)viewDidLoad;
/// Displays and hides the instrument button list
/// \param sender The UIButton to show/hide the list of instruments
///
- (IBAction)instrumentsWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a piano.
/// \param sender The UIButton labeled Piano
///
- (IBAction)pianoWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a clarinet.
/// \param sender The UIButton labeled Clarinet
///
- (IBAction)clarinetWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a french horn.
/// \param sender The UIButton labeled French Horn.
///
- (IBAction)frenchHornWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to pizzicato strings.
/// \param sender The UIButton labeled Pizz Strings.
///
- (IBAction)stringWithSender:(UIButton * _Nonnull)sender;
/// Plays the current interval again. Calls <code>playInterval()</code>.
/// \param sender The UIButton to replay the interval.
///
- (IBAction)playAgainWithSender:(UIButton * _Nonnull)sender;
/// Moves on to the next exercise by resetting the buttons and calls <code>setInterval()</code>.
/// \param sender The UIButton labeled next.
///
- (IBAction)nextWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the interval played is a minor second, turns red if not.
- (IBAction)minorSecondWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the interval played is a major second, turns red if not.
- (IBAction)majorSecondWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the interval played is a minor third, turns red if not.
- (IBAction)minorThirdWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the interval played is a major third, turns red if not.
- (IBAction)majorThirdWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the interval played is a perfect fourth, turns red if not.
- (IBAction)perfectFourthWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the interval played is a tritone, turns red if not.
- (IBAction)tritoneWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the interval played is a perfect fifth, turns red if not.
- (IBAction)perfectFifthWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the interval played is a minor sixth, turns red if not.
- (IBAction)minorSixthWithSender:(UIButton * _Nonnull)sender;
- (IBAction)majorSixthWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the interval played is a minor seventh, turns red if not.
- (IBAction)minorSeventhWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the interval played is a major seventh, turns red if not.
- (IBAction)majorSeventhWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the interval played is an octave, turns red if not.
- (IBAction)octaveWithSender:(UIButton * _Nonnull)sender;
/// Unwind segue when in the instruction page.
- (IBAction)unwindSegueIDWithSegue:(UIStoryboardSegue * _Nonnull)segue;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// View controller for the Descending Diatonic Sing interval exercises.
/// A random descending diatonic interval will be displayed for the user to sing below a given pitch. The user can change the octave using the slider, and the user can change the instrument that is used to play the pitches. The background showing the sung note turns red if it is incorrect, orange if it is correct but out of tune by 10 cents, and green if correct and in tune.
SWIFT_CLASS("_TtC11EarTraining29DescendingDSingViewController")
@interface DescendingDSingViewController : UIViewController
/// Label that displays the given top note.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified givenNote;
/// Label that displays the sung bottom note.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified sungNote;
/// Label that displays the diatonic interval to be sung.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified intervalLabel;
/// Button the user holds down to record.
@property (nonatomic, strong) IBOutlet UIButton * _Null_unspecified recordButton;
/// Collection of the instrument buttons.
@property (nonatomic, copy) IBOutletCollection(UIButton) NSArray<UIButton *> * _Null_unspecified instrumentButtons;
/// Label that displays the number of the exercise.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified exerciseNumLabel;
/// Open the mic and call <code>setInterval()</code>.
- (void)viewDidLoad;
/// Displays and hides the instrument button list
/// \param sender The UIButton to show/hide the list of instruments
///
- (IBAction)instrumentsWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a piano.
/// \param sender The UIButton labeled Piano
///
- (IBAction)pianoWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a clarinet.
/// \param sender The UIButton labeled Clarinet
///
- (IBAction)clarinetWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a french horn.
/// \param sender The UIButton labeled French Horn.
///
- (IBAction)frenchHornWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to pizzicato strings.
/// \param sender The UIButton labeled Pizz Strings.
///
- (IBAction)stringWithSender:(UIButton * _Nonnull)sender;
/// Changes the octave of the given note and answer.
/// \param sender The UISlider.
///
- (IBAction)changeOctaveWithSender:(UISlider * _Nonnull)sender;
/// Plays the top note again.
/// \param sender The UIButton to replay the given top note.
///
- (IBAction)replayWithSender:(UIButton * _Nonnull)sender;
/// Plays the answer (bottom note).
/// \param sender The UIButton to play the answer.
///
- (IBAction)playAnswerWithSender:(UIButton * _Nonnull)sender;
/// Moves on to the next exercise by resetting the buttons, calls <code>setInterval()</code>, and plays the new top note.
/// \param sender The UIButton labeled start.
///
- (IBAction)startWithSender:(UIButton * _Nonnull)sender;
/// Sets the sung note label to what is being sung into the microphone.
- (void)updateUI;
/// Changes the text on the button used to hold down to record when pressed, and calls <code>updateUI()</code> using the timer.
- (IBAction)handleGesture:(UILongPressGestureRecognizer * _Nonnull)sender;
/// Unwind segue when in the instruction page.
- (IBAction)unwindSegueSingingWithSegue:(UIStoryboardSegue * _Nonnull)segue;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// View controller for the Descending Diatonic interval exercises.
/// Random descending diatonic intervals will be played, and the user guesses the interval by pressing on the corresponding buttons. The user has the option to change the instrument that is used to play the intervals.
SWIFT_CLASS("_TtC11EarTraining32DescendingDiatonicViewController")
@interface DescendingDiatonicViewController : UIViewController
/// Collection of the interval buttons.
@property (nonatomic, copy) IBOutletCollection(UIButton) NSArray<UIButton *> * _Null_unspecified intervalButtons;
/// Collection of the instrument buttons.
@property (nonatomic, copy) IBOutletCollection(UIButton) NSArray<UIButton *> * _Null_unspecified instrumentButtons;
/// Label that displays the number of the exercise.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified exerciseNumLabel;
/// Close the mic and call <code>setInterval()</code>.
- (void)viewDidLoad;
/// Displays and hides the instrument button list
/// \param sender The UIButton to show/hide the list of instruments
///
- (IBAction)instrumentsWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a piano.
/// \param sender The UIButton labeled Piano
///
- (IBAction)pianoWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a clarinet.
/// \param sender The UIButton labeled Clarinet
///
- (IBAction)clarinetWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a french horn.
/// \param sender The UIButton labeled French Horn.
///
- (IBAction)frenchHornWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to pizzicato strings.
/// \param sender The UIButton labeled Pizz Strings.
///
- (IBAction)stringWithSender:(UIButton * _Nonnull)sender;
/// Plays the current interval again. Calls <code>playInterval()</code>.
/// \param sender The UIButton to replay the interval.
///
- (IBAction)playAgainWithSender:(UIButton * _Nonnull)sender;
/// Moves on to the next exercise by resetting the buttons and calls <code>setInterval()</code>.
/// \param sender The UIButton labeled next.
///
- (IBAction)nextWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the interval played is a major second, turns red if not.
- (IBAction)majorSecondWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the interval played is a major third, turns red if not.
- (IBAction)majorThirdWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the interval played is a perfect fourth, turns red if not.
- (IBAction)perfectFourthWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the interval played is a perfect fifth, turns red if not.
- (IBAction)perfectFifthWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the interval played is a major sixth, turns red if not.
- (IBAction)majorSixthWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the interval played is a major seventh, turns red if not.
- (IBAction)majorSeventhWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the interval played is an octave, turns red if not.
- (IBAction)octaveWithSender:(UIButton * _Nonnull)sender;
/// Unwind segue when in the instruction page.
- (IBAction)unwindSegueIDWithSegue:(UIStoryboardSegue * _Nonnull)segue;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIImageView;

SWIFT_CLASS("_TtC11EarTraining21ExerciseTableViewCell")
@interface ExerciseTableViewCell : UITableViewCell
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified nameLabel;
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified descriptionLabel;
@property (nonatomic, strong) IBOutlet UIImageView * _Null_unspecified musicImage;
- (void)awakeFromNib;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11EarTraining27ExerciseTableViewController")
@interface ExerciseTableViewController : UITableViewController
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (nonnull instancetype)initWithStyle:(UITableViewStyle)style OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// Table view controller to display the interval exercises.
SWIFT_CLASS("_TtC11EarTraining27IntervalTableViewController")
@interface IntervalTableViewController : UITableViewController
/// Sets the large title display mode to never.
- (void)viewDidLoad;
/// Set the headers for the Diatonic and Chromatic sections
- (UIView * _Nullable)tableView:(UITableView * _Nonnull)tableView viewForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// Set the height for the headers to 50
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// Set the number of sections to be the number of exercises
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
/// Set the number of rows in each section to be the number of exercises in each section
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// Configure the cell with the exercise name, description, and image
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// Call <code>performSegue()</code> on the exercise the user selects
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (nonnull instancetype)initWithStyle:(UITableViewStyle)style OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// View controller for the Major and Minor Scale exercises.
/// A random major, natural minor, harmonic minor, or melodic minor scale will be played, and the user guesses the type of scale by pressing on the corresponding buttons. The user has the option to change the instrument that is used to play the scales.
SWIFT_CLASS("_TtC11EarTraining26MajMinScalesViewController")
@interface MajMinScalesViewController : UIViewController
/// Collection of the scale buttons.
@property (nonatomic, copy) IBOutletCollection(UIButton) NSArray<UIButton *> * _Null_unspecified scaleButtons;
/// Collection of the instrument buttons.
@property (nonatomic, copy) IBOutletCollection(UIButton) NSArray<UIButton *> * _Null_unspecified instrumentButtons;
/// Label that displays the number of the exercise.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified exerciseNumLabel;
/// Close the mic, add scales to <code>scaleList</code>, and set <code>scaleType</code> and <code>firstNote</code> to random indices.
- (void)viewDidLoad;
/// Displays and hides the instrument button list
/// \param sender The UIButton to show/hide the list of instruments
///
- (IBAction)instrumentsWithSender:(UIButton * _Nonnull)sender;
/// Plays the current scale again. Calls <code>playScale()</code>.
- (IBAction)playAgainWithSender:(UIButton * _Nonnull)sender;
/// Moves on to the next exercise by resetting the buttons and randomly selecting a scale type and first note.
/// \param sender The UIButton labeled next.
///
- (IBAction)nextWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a piano.
/// \param sender The UIButton labeled Piano
///
- (IBAction)pianoWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a clarinet.
/// \param sender The UIButton labeled Clarinet
///
- (IBAction)clarinetWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a french horn.
/// \param sender The UIButton labeled French Horn.
///
- (IBAction)frenchHornWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to pizzicato strings.
/// \param sender The UIButton labeled Pizz Strings.
///
- (IBAction)stringWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the scale played is a major scale, turns red if not.
- (IBAction)majorWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the scale played is a natural minor scale, turns red if not.
- (IBAction)naturalMinorWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the scale played is a harmonic minor scale, turns red if not.
- (IBAction)harmonicMinorWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the scale played is a melodic minor scale, turns red if not.
- (IBAction)melodicMinorWithSender:(UIButton * _Nonnull)sender;
/// Unwind segue when in the instruction page.
- (IBAction)unwindSegueIDWithSegue:(UIStoryboardSegue * _Nonnull)segue;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// View controller for the Sing Major and Minor Scale exercises.
/// A random major, natural minor, harmonic minor, or melodic minor scale will be displayed along with a starting pitch. The user must hold down the record button and sing the scale from the starting pitch. The user has the option to change the instrument that is used to play the starting pitch and answer, and they can use the slider to change the octave of the scale.
SWIFT_CLASS("_TtC11EarTraining24MajMinSingViewController")
@interface MajMinSingViewController : UIViewController
/// Label that displays the number of the exercise.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified exerciseNumLabel;
/// Label for note 1.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified note1;
/// Label for note 2.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified note2;
/// Label for note 3.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified note3;
/// Label for note 4.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified note4;
/// Label for note 5.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified note5;
/// Label for note 6.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified note6;
/// Label for note 7.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified note7;
/// Label for note 8.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified note8;
/// Label for the scale type.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified scaleLabel;
/// The record button.
@property (nonatomic, strong) IBOutlet UIButton * _Null_unspecified recordButton;
/// Collection of the instrument buttons.
@property (nonatomic, copy) IBOutletCollection(UIButton) NSArray<UIButton *> * _Null_unspecified instrumentButtons;
/// Collection of the note labels.
@property (nonatomic, copy) IBOutletCollection(UILabel) NSArray<UILabel *> * _Null_unspecified noteLabels;
/// Set the mic, add scales to <code>scaleList</code>, and call <code>setScale()</code>.
- (void)viewDidLoad;
/// Changes the octave of the scale.
/// \param sender The UISlider.
///
- (IBAction)changeOctaveWithSender:(UISlider * _Nonnull)sender;
/// Plays the first note of the current scale.
/// \param sender The UIButton to play the first note of the scale.
///
- (IBAction)playFirstNoteWithSender:(UIButton * _Nonnull)sender;
/// Plays the current scale (the answer; the scale the user should sing).
/// \param sender The UIButton to play the answer.
///
- (IBAction)playAnswerWithSender:(UIButton * _Nonnull)sender;
/// Moves on to the next exercise by resetting the labels and calls <code>setScale()</code>.
/// \param sender The UIButton labeled next.
///
- (IBAction)nextWithSender:(UIButton * _Nonnull)sender;
/// Displays and hides the instrument button list.
/// \param sender The UIButton to show/hide the list of instruments
///
- (IBAction)instrumentsWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a piano.
/// \param sender The UIButton labeled Piano
///
- (IBAction)pianoWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a clarinet.
/// \param sender The UIButton labeled Clarinet
///
- (IBAction)clarinetWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a french horn.
/// \param sender The UIButton labeled French Horn.
///
- (IBAction)frenchHornWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to pizzicato strings.
/// \param sender The UIButton labeled Pizz Strings.
///
- (IBAction)stringWithSender:(UIButton * _Nonnull)sender;
/// Changes the text on the button used to hold down to record when pressed, and calls <code>updateUI()</code> using the timer.
- (IBAction)handleGesture:(UILongPressGestureRecognizer * _Nonnull)sender;
/// Sets the sung note label to what is being sung into the microphone.
- (void)updateUI;
/// Unwind segue when in the instruction page.
- (IBAction)unwindSegueScaleSingWithSegue:(UIStoryboardSegue * _Nonnull)segue;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// View controller for the Modes of the Major Scale exercises.
/// A random mode of the major scale will be played, and the user guesses the type of scale by pressing on the corresponding buttons. The user has the option to change the instrument that is used to play the scales.
SWIFT_CLASS("_TtC11EarTraining25ModesScalesViewController")
@interface ModesScalesViewController : UIViewController
/// Collection of the scale buttons.
@property (nonatomic, copy) IBOutletCollection(UIButton) NSArray<UIButton *> * _Null_unspecified scaleButtons;
/// Collection of the instrument buttons.
@property (nonatomic, copy) IBOutletCollection(UIButton) NSArray<UIButton *> * _Null_unspecified instrumentButtons;
/// Label that displays the number of the exercise.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified exerciseNumLabel;
/// Close the mic, add scales to <code>scaleList</code>, and set <code>scaleType</code> and <code>firstNote</code> to random indices.
- (void)viewDidLoad;
/// Displays and hides the instrument button list
/// \param sender The UIButton to show/hide the list of instruments
///
- (IBAction)instrumentsWithSender:(UIButton * _Nonnull)sender;
/// Plays the current scale again. Calls <code>playScale()</code>.
- (IBAction)playAgainWithSender:(UIButton * _Nonnull)sender;
/// Moves on to the next exercise by resetting the buttons and randomly selecting a scale type and first note.
/// \param sender The UIButton labeled next.
///
- (IBAction)nextWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a piano.
/// \param sender The UIButton labeled Piano
///
- (IBAction)pianoWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a clarinet.
/// \param sender The UIButton labeled Clarinet
///
- (IBAction)clarinetWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a french horn.
/// \param sender The UIButton labeled French Horn.
///
- (IBAction)frenchHornWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to pizzicato strings.
/// \param sender The UIButton labeled Pizz Strings.
///
- (IBAction)stringWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the scale played is an ionian scale, turns red if not.
- (IBAction)ionianWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the scale played is a dorian scale, turns red if not.
- (IBAction)dorianWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the scale played is a phrygian scale, turns red if not.
- (IBAction)phrygianWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the scale played is a lydian scale, turns red if not.
- (IBAction)lydianWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the scale played is a mixolydian scale, turns red if not.
- (IBAction)mixolydianWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the scale played is an aeolian scale, turns red if not.
- (IBAction)aeolianWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the scale played is a locrian scale, turns red if not.
- (IBAction)locrianWithSender:(UIButton * _Nonnull)sender;
/// Unwind segue when in the instruction page.
- (IBAction)unwindSegueIDWithSegue:(UIStoryboardSegue * _Nonnull)segue;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// View controller for the Sing Modes of the Major Scale exercises.
/// A random mode of the major scale will be displayed along with a starting pitch. The user must hold down the record button and sing the scale from the starting pitch. The user has the option to change the instrument that is used to play the starting pitch and answer, and they can use the slider to change the octave of the scale.
SWIFT_CLASS("_TtC11EarTraining23ModesSingViewController")
@interface ModesSingViewController : UIViewController
/// Label that displays the number of the exercise.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified exerciseNumLabel;
/// Label for note 1.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified note1;
/// Label for note 2.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified note2;
/// Label for note 3.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified note3;
/// Label for note 4.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified note4;
/// Label for note 5.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified note5;
/// Label for note 6.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified note6;
/// Label for note 7.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified note7;
/// Label for note 8.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified note8;
/// Label for the scale type.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified scaleLabel;
/// The record button.
@property (nonatomic, strong) IBOutlet UIButton * _Null_unspecified recordButton;
/// Collection of the instrument buttons.
@property (nonatomic, copy) IBOutletCollection(UIButton) NSArray<UIButton *> * _Null_unspecified instrumentButtons;
/// Collection of the note labels.
@property (nonatomic, copy) IBOutletCollection(UILabel) NSArray<UILabel *> * _Null_unspecified noteLabels;
/// Set the mic, add scales to <code>scaleList</code>, and call <code>setScale()</code>.
- (void)viewDidLoad;
/// Changes the octave of the scale.
/// \param sender The UISlider.
///
- (IBAction)changeOctaveWithSender:(UISlider * _Nonnull)sender;
/// Plays the first note of the current scale.
/// \param sender The UIButton to play the first note of the scale.
///
- (IBAction)playFirstNoteWithSender:(UIButton * _Nonnull)sender;
/// Plays the current scale (the answer; the scale the user should sing).
/// \param sender The UIButton to play the answer.
///
- (IBAction)playAnswerWithSender:(UIButton * _Nonnull)sender;
/// Moves on to the next exercise by resetting the labels and calls <code>setScale()</code>.
/// \param sender The UIButton labeled next.
///
- (IBAction)nextWithSender:(UIButton * _Nonnull)sender;
/// Displays and hides the instrument button list.
/// \param sender The UIButton to show/hide the list of instruments
///
- (IBAction)instrumentsWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a piano.
/// \param sender The UIButton labeled Piano
///
- (IBAction)pianoWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a clarinet.
/// \param sender The UIButton labeled Clarinet
///
- (IBAction)clarinetWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a french horn.
/// \param sender The UIButton labeled French Horn.
///
- (IBAction)frenchHornWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to pizzicato strings.
/// \param sender The UIButton labeled Pizz Strings.
///
- (IBAction)stringWithSender:(UIButton * _Nonnull)sender;
/// Changes the text on the button used to hold down to record when pressed, and calls <code>updateUI()</code> using the timer.
- (IBAction)handleGesture:(UILongPressGestureRecognizer * _Nonnull)sender;
/// Sets the sung note label to what is being sung into the microphone.
- (void)updateUI;
/// Unwind segue when in the instruction page.
- (IBAction)unwindSegueScaleSingWithSegue:(UIStoryboardSegue * _Nonnull)segue;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// Table view controller to display the scale exercises.
SWIFT_CLASS("_TtC11EarTraining25ScalesTableViewController")
@interface ScalesTableViewController : UITableViewController
/// Sets the large title display mode to never.
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
/// Set the headers for the scale exercises
- (UIView * _Nullable)tableView:(UITableView * _Nonnull)tableView viewForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// Set the height for the headers to 50
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// Set the number of sections to be the number of exercises
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
/// Set the number of rows in each section to be the number of exercises in each section
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// Configure the cell with the exercise name, description, and image
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// Call <code>performSegue()</code> on the exercise the user selects.
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (nonnull instancetype)initWithStyle:(UITableViewStyle)style OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// View controller for the Seventh Identification exercises
/// Random seventh chords in root position will be played, and the user guesses the type of seventh chord by pressing on the corresponding buttons. The user has the option to change the instrument that is used to play the chords.
SWIFT_CLASS("_TtC11EarTraining35SeventhIdentificationViewController")
@interface SeventhIdentificationViewController : UIViewController
/// Collection of the interval buttons.
@property (nonatomic, copy) IBOutletCollection(UIButton) NSArray<UIButton *> * _Null_unspecified intervalButtons;
/// Collection of the instrument buttons.
@property (nonatomic, copy) IBOutletCollection(UIButton) NSArray<UIButton *> * _Null_unspecified instrumentButtons;
/// Label that displays the number of the exercise.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified exerciseNumLabel;
/// Close the mic, add chords to <code>chordList</code>, and call <code>setChord()</code>.
- (void)viewDidLoad;
/// Displays and hides the instrument button list
/// \param sender The UIButton to show/hide the list of instruments
///
- (IBAction)instrumentsWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a piano.
/// \param sender The UIButton labeled Piano
///
- (IBAction)pianoWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a clarinet.
/// \param sender The UIButton labeled Clarinet
///
- (IBAction)clarinetWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a french horn.
/// \param sender The UIButton labeled French Horn.
///
- (IBAction)frenchHornWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to pizzicato strings.
/// \param sender The UIButton labeled Pizz Strings.
///
- (IBAction)stringWithSender:(UIButton * _Nonnull)sender;
/// Plays the current seventh chord again. Calls <code>playChord()</code>.
/// \param sender The UIButton to replay the chord.
///
- (IBAction)playAgainWithSender:(UIButton * _Nonnull)sender;
/// Moves on to the next exercise by resetting the buttons and calls <code>setChord()</code>.
/// \param sender The UIButton labeled next.
///
- (IBAction)nextWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the chord played is a major seventh chord, turns red if not.
- (IBAction)majSChordWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the chord played is a minor seventh chord, turns red if not.
- (IBAction)minSChordWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the chord played is a dominant chord, turns red if not.
- (IBAction)domChordWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the chord played is a half diminished seventh chord, turns red if not.
- (IBAction)hDimChordWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the chord played is a diminished seventh chord, turns red if not.
- (IBAction)fDimChordWithSender:(UIButton * _Nonnull)sender;
/// Unwind segue when in the instruction page.
- (IBAction)unwindSegueIDWithSegue:(UIStoryboardSegue * _Nonnull)segue;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// View controller for the Seventh Chord Singing exercises.
/// A random seventh chord and root note will be chosen and displayed to the user, and the user has to sing the seventh chord sequentially into the microphone while holding down the record button.
SWIFT_CLASS("_TtC11EarTraining26SingSeventhsViewController")
@interface SingSeventhsViewController : UIViewController
/// Label that displays the number of the exercise.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified exerciseNumLabel;
/// Label that displays the root note.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified rootNote;
/// Label that displays the note that is the third of the seventh chord.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified thirdNote;
/// Label that displays the note that is the fifth of the seventh chord.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified fifthNote;
/// Label that displays the note that is the seventh of the seventh chord.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified seventhNote;
/// Label that displays the type of seventh chord.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified chordLabel;
/// Button that the user holds down to record.
@property (nonatomic, strong) IBOutlet UIButton * _Null_unspecified recordButton;
/// Collection of the intrument buttons.
@property (nonatomic, copy) IBOutletCollection(UIButton) NSArray<UIButton *> * _Null_unspecified instrumentButtons;
/// Set the mic, add chords to <code>chordList</code>, and call <code>setChord()</code>.
- (void)viewDidLoad;
/// Displays and hides the instrument button list.
/// \param sender The UIButton to show/hide the list of instruments
///
- (IBAction)instrumentsWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a piano.
/// \param sender The UIButton labeled Piano
///
- (IBAction)pianoWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a clarinet.
/// \param sender The UIButton labeled Clarinet
///
- (IBAction)clarinetWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a french horn.
/// \param sender The UIButton labeled French Horn.
///
- (IBAction)frenchHornWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to pizzicato strings.
/// \param sender The UIButton labeled Pizz Strings.
///
- (IBAction)stringWithSender:(UIButton * _Nonnull)sender;
/// Plays the root note again.
/// \param sender The UIButton to play the root of the chord.
///
- (IBAction)playRootWithSender:(UIButton * _Nonnull)sender;
/// Plays the chord as a sequence (as you would sing it).
/// \param sender The UIButton to play the answer/chord sequence.
///
- (IBAction)playChordSequenceWithSender:(UIButton * _Nonnull)sender;
/// Plays the seventh chord, all four notes simultaneously.
/// \param sender The UIButton to play the chord.
///
- (IBAction)playChordWithSender:(UIButton * _Nonnull)sender;
/// Moves on to the next exercise by resetting the labels and calls <code>setChord()</code>.
/// \param sender The UIButton labeled next.
///
- (IBAction)nextWithSender:(UIButton * _Nonnull)sender;
/// Changes the octave of the chord.
/// \param sender The UISlider.
///
- (IBAction)changeOctaveWithSender:(UISlider * _Nonnull)sender;
/// Changes the text on the button used to hold down to record when pressed, and calls <code>updateUI()</code> using the timer.
- (IBAction)handleGesture:(UILongPressGestureRecognizer * _Nonnull)sender;
/// Sets the sung note label to what is being sung into the microphone.
- (void)updateUI;
/// Unwind segue when in the instruction page.
- (IBAction)unwindSegueChordSingWithSegue:(UIStoryboardSegue * _Nonnull)segue;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// View controller for the Triad Singing exercises.
/// A random triad and root note will be chosen and displayed to the user, and the user has to sing the triad sequentially into the microphone while holding down the record button.
SWIFT_CLASS("_TtC11EarTraining24SingTriadsViewController")
@interface SingTriadsViewController : UIViewController
/// Label that displays the number of the exercise.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified exerciseNumLabel;
/// Label that displays the root note.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified rootNote;
/// Label that displays the note that is the third of the triad.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified thirdNote;
/// Label that displays the note that is the fifth of the triad.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified fifthNote;
/// Label that displays the type of triad.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified triadLabel;
/// Button that the user holds down to record.
@property (nonatomic, strong) IBOutlet UIButton * _Null_unspecified recordButton;
/// Collection of the intrument buttons.
@property (nonatomic, copy) IBOutletCollection(UIButton) NSArray<UIButton *> * _Null_unspecified instrumentButtons;
/// Close the mic, add chords to <code>chordList</code>, and call <code>setChord()</code>.
- (void)viewDidLoad;
/// Displays and hides the instrument button list
/// \param sender The UIButton to show/hide the list of instruments
///
- (IBAction)instrumentsWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a piano.
/// \param sender The UIButton labeled Piano
///
- (IBAction)pianoWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a clarinet.
/// \param sender The UIButton labeled Clarinet
///
- (IBAction)clarinetWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a french horn.
/// \param sender The UIButton labeled French Horn.
///
- (IBAction)frenchHornWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to pizzicato strings.
/// \param sender The UIButton labeled Pizz Strings.
///
- (IBAction)stringWithSender:(UIButton * _Nonnull)sender;
/// Plays the root note again.
/// \param sender The UIButton to play the root of the chord.
///
- (IBAction)playRootWithSender:(UIButton * _Nonnull)sender;
/// Plays the chord as a sequence (as you would sing it).
/// \param sender The UIButton to play the answer/chord sequence.
///
- (IBAction)playChordSequenceWithSender:(UIButton * _Nonnull)sender;
/// Plays the triad, all three notes simultaneously.
/// \param sender The UIButton to play the chord.
///
- (IBAction)playChordWithSender:(UIButton * _Nonnull)sender;
/// Moves on to the next exercise by resetting the labels and calls <code>setChord()</code>.
/// \param sender The UIButton labeled next.
///
- (IBAction)nextWithSender:(UIButton * _Nonnull)sender;
/// Changes the octave of the chord.
/// \param sender The UISlider.
///
- (IBAction)changeOctaveWithSender:(UISlider * _Nonnull)sender;
/// Changes the text on the button used to hold down to record when pressed, and calls <code>updateUI()</code> using the timer.
- (IBAction)handleGesture:(UILongPressGestureRecognizer * _Nonnull)sender;
/// Sets the sung note label to what is being sung into the microphone.
- (void)updateUI;
/// Unwind segue when in the instruction page.
- (IBAction)unwindSegueChordSingWithSegue:(UIStoryboardSegue * _Nonnull)segue;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// View controller for the Triad Identification exercises.
/// Random triads in root position will be played, and the user guesses the type of triad by pressing on the corresponding buttons. The user has the option to change the instrument that is used to play the chords.
SWIFT_CLASS("_TtC11EarTraining33TriadIdentificationViewController")
@interface TriadIdentificationViewController : UIViewController
/// Collection of the interval buttons.
@property (nonatomic, copy) IBOutletCollection(UIButton) NSArray<UIButton *> * _Null_unspecified intervalButtons;
/// Collection of the instrument buttons.
@property (nonatomic, copy) IBOutletCollection(UIButton) NSArray<UIButton *> * _Null_unspecified instrumentButtons;
/// Label that displays the number of the exercise.
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified exerciseNumLabel;
/// Close the mic, add chords to <code>chordList</code>, and call <code>setChord()</code>.
- (void)viewDidLoad;
/// Displays and hides the instrument button list
/// \param sender The UIButton to show/hide the list of instruments
///
- (IBAction)instrumentsWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a piano.
/// \param sender The UIButton labeled Piano
///
- (IBAction)pianoWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a clarinet.
/// \param sender The UIButton labeled Clarinet
///
- (IBAction)clarinetWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to a french horn.
/// \param sender The UIButton labeled French Horn.
///
- (IBAction)frenchHornWithSender:(UIButton * _Nonnull)sender;
/// Changes the instrument to pizzicato strings.
/// \param sender The UIButton labeled Pizz Strings.
///
- (IBAction)stringWithSender:(UIButton * _Nonnull)sender;
/// Plays the current triad again. Calls <code>playChord()</code>.
/// \param sender The UIButton to replay the triad.
///
- (IBAction)playAgainWithSender:(UIButton * _Nonnull)sender;
/// Moves on to the next exercise by resetting the buttons and calls <code>setChord()</code>.
/// \param sender The UIButton labeled next.
///
- (IBAction)nextWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the triad played is a major triad, turns red if not.
- (IBAction)majChordWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the triad played is a minor triad, turns red if not.
- (IBAction)minChordWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the triad played is a diminished triad, turns red if not.
- (IBAction)dimChordWithSender:(UIButton * _Nonnull)sender;
/// Button turns green if the triad played is an augmented triad, turns red if not.
- (IBAction)augChordWithSender:(UIButton * _Nonnull)sender;
/// Unwind segue when in the instruction page.
- (IBAction)unwindSegueIDWithSegue:(UIStoryboardSegue * _Nonnull)segue;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
